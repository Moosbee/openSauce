<?php namespace ProcessWire;

/**
 * @author  flipzoom; Media - David Karich
 * @contact David Karich <david.karich@flipzoom.de>
 * @website www.flipzoom.de
 * @create  2021-02-09
 * @style   Tab size: 4 / Soft tabs: YES
 * ----------------------------------------------------------------------------------
 * @licence
 * Copyright (c) 2021 flipzoom; Media - David Karich
 * Permission is hereby granted, free of charge, to any person obtaining a copy 
 * of this software and associated documentation files (the "Software"), to deal 
 * in the Software without restriction, including without limitation the rights 
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
 * copies of the Software, and to permit persons to whom the Software is furnished 
 * to do so, subject to the following conditions: The above copyright notice and 
 * this permission notice shall be included in all copies or substantial portions 
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ----------------------------------------------------------------------------------
 */

class PageHitCounter extends WireData implements Module, ConfigurableModule {

    /**
     * ------------------------------------------------------------------------
     * Define database tables
     * ------------------------------------------------------------------------
     */
    const PHCDBTABLE        = 'field_phits';
    const PHCFIELDNAME      = 'phits';

    /**
     * ------------------------------------------------------------------------
     * Define cookie / session name
     * ------------------------------------------------------------------------
     */
    const PHCCOOKIE         = 'phc-';
    const PHCSESSION        = 'phcs-';

    /**
     * ------------------------------------------------------------------------
     * Default module info
     * ------------------------------------------------------------------------
     * @return array
     */
    public static function getModuleinfo() {
        return array(
            'title'         => __('Page Hit Counter'),
            'summary'       => __('The Page Hit Counter module implements a simple page view counter. Page views of visitors are automatically tracked on defined templates, with monitoring of multiple page views. Even if the page is cached. Also works with ProCache and AdBlockers. With a lightweight tracking code of 320 bytes (gzipped). In addition GDPR compliant, since no personal data or IP addresses are stored. Only session cookies are stored without information.'),
            'author'        => 'David Karich - flipzoom; Media',
            'href'          => 'https://github.com/FlipZoomMedia/PageHitCounter',
            'singular'      => true,
            'autoload'      => true,
            'icon'          => 'eye', 
            'version'       => 200, 
            'requires'      => array('ProcessWire>=3.0.80', 'PHP>=5.6'), 
            'installs'      => array('FieldtypePageHitCounter')
        );
    }

    /**
     * ------------------------------------------------------------------------
     * Default configuration values
     * ------------------------------------------------------------------------
     * @return array
     */
    public static function getDefaultConfig() {
        return array(
            'forTemplates'              => array(), 
            'forAPITemplates'           => array(), 
            'thousandSeparator'         => '.', 
            'cookielessTracking'        => 0,
            'sessionLifetime'           => 1200, 
            'ignoreURLSegments'         => 0,
            'ipFilter'                  => '', 
            'botFilter'                 => 1, 
            'customAttributes'          => 'defer', 
            'forRoles'                  => array(), 
            'showForBackend'            => 1,
            'ipValidation'              => 1, 
            'excludeTemplates'          => array()
        );
    }

    /**
     * ------------------------------------------------------------------------
     * Populate default configuration (will be overwritten after constructor 
     * with user's own configuration)
     * ------------------------------------------------------------------------
     * @return object
     */
    public function __construct() {
        foreach(self::getDefaultConfig() as $key => $value) {
            $this->$key = $value;
        }
    }

    /**
     * ------------------------------------------------------------------------
     * Build module configuration page
     * ------------------------------------------------------------------------
     * @param  array  $data
     * @return mixed
     */
    static public function getModuleConfigInputfields(array $data) {
        
        // ------------------------------------------------------------------------
        // Init vars
        // ------------------------------------------------------------------------
        $modules        = wire('modules');
        $input          = wire('input');
        $pwTemplates    = wire('templates');
        $pwRoles        = wire('roles');
        $session        = wire('session');
        $config         = wire('config');
        $resetResult    = $session->get('resetResult');

        // ------------------------------------------------------------------------
        // Build template array and exclude system templates
        // ------------------------------------------------------------------------
        foreach($pwTemplates as $template) {
            if($template->flags AND Template::flagSystem) continue;
            $templates[] = $template;
        }

        // ------------------------------------------------------------------------
        // Build roles array
        // ------------------------------------------------------------------------
        foreach($pwRoles as $role) {
            $roles[] = $role;
        }

        // ------------------------------------------------------------------------
        // Merge default config settings (custom values overwrite defaults)
        // ------------------------------------------------------------------------
        $defaults   = self::getDefaultConfig();
        $data       = array_merge($defaults, $data);

        // ------------------------------------------------------------------------
        // On save actions
        // ------------------------------------------------------------------------
        if($input->post->submit_save_module) {
            $forTemplates       = (array) $input->post->forTemplates;
            $forAPITemplates    = (array) $input->post->forAPITemplates;
            $thousandSeparator  = (string) $input->post->thousandSeparator;
            $cookielessTracking = (int) $input->post->cookielessTracking;
            $sessionLifetime    = (int) $input->post->sessionLifetime;
            $ignoreURLSegments  = (int) $input->post->ignoreURLSegments;
            $ipFilter           = (string) $input->post->ipFilter;
            $botFilter          = (int) $input->post->botFilter;
            $customAttributes   = (string) $input->post->customAttributes;
            $forRoles           = (array) $input->post->forRoles;
            $showForBackend     = (int) $input->post->showForBackend;
            $ipValidation       = (int) $input->post->ipValidation;
            $excludeTemplates   = (array) $input->post->excludeTemplates;

            // ------------------------------------------------------------------------
            // Perform counter reset
            // ------------------------------------------------------------------------
            if($input->post->resetSelector !== "") {
                $modules->get("PageHitCounter")->resetPageViews((string) $input->post->resetSelector, (int) $input->post->dryRun);
            }

            // ------------------------------------------------------------------------
            // Add phit field to selected templates
            // ------------------------------------------------------------------------
            $modules->get("PageHitCounter")->addCounterField(array_unique(array_merge($forTemplates, $forAPITemplates)));
        }

        // ------------------------------------------------------------------------
        // Build config screen form
        // ------------------------------------------------------------------------
        $form = new InputfieldWrapper();

            // ------------------------------------------------------------------------
            // Template select for automatic tracking
            // ------------------------------------------------------------------------
            $field                  = $modules->get("InputfieldAsmSelect");
            $field->name            = "forTemplates";
            $field->label           = __("Templates for automatic tracking");
            $field->icon            = "cubes";
            $field->columnWidth     = '100';
            $field->description     = __("Select one or more templates, which should automatically have a hit counter and be tracked in the frontend. These templates must represent a complete page in the frontend, with a <body> tag.");
            $field->notes           = __("For the selected templates, a lightweight tracking script is injected before the closing </body> tag.");
            foreach($templates as $template) $field->addOption($template->name);
            $field->value           = $data['forTemplates'];
            $form->add($field);

            // ------------------------------------------------------------------------
            // Template select for API tracking
            // ------------------------------------------------------------------------
            $field                  = $modules->get("InputfieldAsmSelect");
            $field->name            = "forAPITemplates";
            $field->label           = __("Templates for allowed API tracking");
            $field->icon            = "cubes";
            $field->columnWidth     = '100';
            $field->description     = __("Select one or more templates, which can be trackable via the API, but are not directly viewable in the frontend. For example to track keywords.");
            $field->notes           = __("You can find out how to track a page hit via the API in the documentation.");
            foreach($templates as $template) $field->addOption($template->name);
            $field->value           = $data['forAPITemplates'];
            $form->add($field);

            // ------------------------------------------------------------------------
            // Cookieless tracking
            // ------------------------------------------------------------------------
            $field                  = $modules->get("InputfieldCheckbox");
            $field->name            = "cookielessTracking";
            $field->label           = __("Use cookieless tracking (Experimental)");
            $field->checkboxLabel   = __("Use cookieless tracking");
            $field->icon            = "user-secret";
            $field->columnWidth     = '50';
            $field->checked         = ($data['cookielessTracking']) ? 'checked' : '';
            $field->description     = __("Enable this option to not use cookies for tracking or if you have many different pages you want to track. The limit for cookies is 50 per domain for all cookies on the page. If the option is enabled, PHP session storage is used. Downside: you can't set the lifetime higher than configured in your PHP.ini and the session will be terminated as soon as the browser is closed.");
            $field->notes           = __("The lifetime of your PHP session (session.gc_maxlifetime) is configured to ". ini_get('session.gc_maxlifetime') ." seconds. The only cookie used is the default ProcessWire session cookie \"". $config->sessionName ."\".");
            $field->value           = $data['cookielessTracking'];
            $form->add($field);

            // ------------------------------------------------------------------------
            // Session lifetime for counting
            // ------------------------------------------------------------------------
            $field                  = $modules->get("InputfieldText");
            $field->name            = "sessionLifetime";
            $field->label           = __("Session lifetime in seconds");
            $field->icon            = "clock-o";
            $field->columnWidth     = '50';
            $field->required        = 1;
            $field->description     = __("During this period, repeated page views of the same page and by the same visitor are not counted as page view. Please note, if you use \"Cookieless tracking\", then the lifetime behavior is different and depends on your PHP.ini configuration. Also, the storage is not persistent and is cleared when you close the browser.");
            $field->notes           = __("Default: 1200s. Corresponds to a lifetime of 20 minutes. If you set the value to 0, no cookie is stored and every page view is counted.");

                // ------------------------------------------------------------------------
                // Check lifetime values depending on the tracking method used
                // ------------------------------------------------------------------------
                if($data['cookielessTracking'] === 1) {
                    if((int) $data['sessionLifetime'] < 0) $lifetime = 1200;
                    elseif((int) $data['sessionLifetime'] > ini_get('session.gc_maxlifetime')) $lifetime = (int) ini_get('session.gc_maxlifetime');
                    else $lifetime = (int) $data['sessionLifetime'];
                } else {
                    $lifetime = ((int) $data['sessionLifetime'] < 0) ? 1200 : $data['sessionLifetime'];
                }

            $field->value           = $lifetime;
            $form->add($field);

            // ------------------------------------------------------------------------
            // Ignore URL segments
            // ------------------------------------------------------------------------
            $field                  = $modules->get("InputfieldCheckbox");
            $field->name            = "ignoreURLSegments";
            $field->label           = __("Ignore URL segments");
            $field->checkboxLabel   = __("Ignore URL segments");
            $field->icon            = "chain";
            $field->columnWidth     = '50';
            $field->checked         = ($data['ignoreURLSegments']) ? 'checked' : '';
            $field->description     = __("If a template has URL segments configured, each hit on a different segment is counted as a new hit. Enable \"Ignore URL segments\" so that dynamic segments are not counted individually on the base template / page.");
            $field->notes           = __("Please note the information about [URL segments](https://github.com/FlipZoomMedia/PageHitCounter#notice-tracking-with-url-segments).");
            $field->value           = $data['ignoreURLSegments'];
            $form->add($field);

            // ------------------------------------------------------------------------
            // Show counter in backend
            // ------------------------------------------------------------------------
            $field                  = $modules->get("InputfieldCheckbox");
            $field->name            = "showForBackend";
            $field->label           = __("Show counter in page tree");
            $field->checkboxLabel   = __("Show counter");
            $field->icon            = "eye";
            $field->columnWidth     = '50';
            $field->checked         = ($data['showForBackend']) ? 'checked' : '';
            $field->description     = __("Should a counter be displayed in the admin page tree?");
            $field->notes           = __("You can also output the counter yourself with the field name \"phits\".");
            $field->value           = $data['showForBackend'];
            $form->add($field);

            // ------------------------------------------------------------------------
            // Template select for excluding in page tree
            // ------------------------------------------------------------------------
            $field                  = $modules->get("InputfieldAsmSelect");
            $field->name            = "excludeTemplates";
            $field->label           = __("Exclude templates for page tree counter");
            $field->showIf          = "showForBackend=1";
            $field->icon            = "cubes";
            $field->columnWidth     = '100';
            $field->description     = __("Define here the templates for which no counter should be displayed explicitly in the page tree.");
            $field->notes           = __("The tracking still works and you have access to the field \"phits\".");
            foreach($templates as $template) $field->addOption($template->name);
            $field->value           = $data['excludeTemplates'];
            $form->add($field);

            // ------------------------------------------------------------------------
            // Bot filter
            // ------------------------------------------------------------------------
            $field                  = $modules->get("InputfieldCheckbox");
            $field->name            = "botFilter";
            $field->label           = __("Bot filter");
            $field->checkboxLabel   = __("Enable bot filter");
            $field->icon            = "android";
            $field->columnWidth     = '50';
            $field->checked         = ($data['botFilter']) ? 'checked' : '';
            $field->description     = __("Should page views, which in the UserAgent give the definition Bot, Crawler or Spider for recognition, be filtered automatically?");
            $field->notes           = __("If no UserAgent can be extracted, the view is still counted.");
            $field->value           = $data['botFilter'];
            $form->add($field);

            // ------------------------------------------------------------------------
            // General IP check
            // ------------------------------------------------------------------------
            $field                  = $modules->get("InputfieldCheckbox");
            $field->name            = "ipValidation";
            $field->label           = __("General IP validation");
            $field->checkboxLabel   = __("Enable IP validation");
            $field->icon            = "heartbeat";
            $field->columnWidth     = '50';
            $field->checked         = ($data['ipValidation']) ? 'checked' : '';
            $field->description     = __("Should a general check be performed for a triggered page view to determine whether the request originates from a valid IP address?");
            $field->notes           = __("For this you need the PHP function \"filter_var()\".");
            $field->value           = $data['ipValidation'];
            $form->add($field);

            // ------------------------------------------------------------------------
            // Custom attributes for tracking script
            // ------------------------------------------------------------------------
            $field                  = $modules->get("InputfieldText");
            $field->name            = "customAttributes";
            $field->label           = __("Tracking script attributes");
            $field->icon            = "code";
            $field->columnWidth     = '50';
            $field->description     = __("Add additional attributes to the tracking script tag. \"defer\" should be included so that the tracking code is not executed until the DOM is ready. This will not block the page rendering.");
            $field->notes           = __("For example: defer data-myattribute=\"my-value\"");
            $field->value           = $data['customAttributes'];
            $form->add($field);

            // ------------------------------------------------------------------------
            // Thousand separator
            // ------------------------------------------------------------------------
            $field                  = $modules->get("InputfieldText");
            $field->name            = "thousandSeparator";
            $field->label           = __("Thousands separator");
            $field->icon            = "ellipsis-h";
            $field->columnWidth     = '50';
            $field->description     = __("For better readability of numbers, a thousand separator can be defined. This option only has an effect if you have activated the option \"Show counter in page tree\".");
            $field->notes           = __("For example , or . or a space. Only for display in the page tree.");
            $field->value           = $data['thousandSeparator'];
            $form->add($field);

            // ------------------------------------------------------------------------
            // Role select
            // ------------------------------------------------------------------------
            $field                  = $modules->get("InputfieldAsmSelect");
            $field->name            = "forRoles";
            $field->label           = __("Exclude roles of logged in users");
            $field->icon            = "user-circle-o";
            $field->columnWidth     = '100';
            $field->description     = __("Logged-in users who are assigned one of the following roles are excluded from tracking. For example, working editors are not counted as page views.");
            foreach($roles as $role) $field->addOption($role->name);
            $field->value           = $data['forRoles'];
            $form->add($field);

            // ------------------------------------------------------------------------
            // Custom IP filter
            // ------------------------------------------------------------------------
            $field                  = $modules->get("InputfieldTextarea");
            $field->name            = "ipFilter";
            $field->label           = __("Custom IP filter");
            $field->icon            = "filter";
            $field->columnWidth     = '100';
            $field->rows            = 5;
            $field->description     = __("A list of IP addresses that should be excluded from tracking. This is useful, for example, if CronJobs run across the page which should not be counted as visitors. One IP address per line.");
            $field->value           = $data['ipFilter'];
            $form->add($field);

                // ------------------------------------------------------------------------
                // Reset counter per selector
                // ------------------------------------------------------------------------
                $fieldset               = $modules->get("InputfieldFieldset");
                $fieldset->name         = "resetCounter";
                $fieldset->collapsed    = ($resetResult) ? Inputfield::collapsedNo : Inputfield::collapsedYes;
                $fieldset->label        = __("Reset Page Views");
                $fieldset->description  = __("Here you have the possibility to reset all page views for a certain selector to 0. Before you execute it, you can start a dry run.");
                $fieldset->icon         = "eraser";
                $fieldset->columnWidth  = '100';

                    // ------------------------------------------------------------------------
                    // Selector
                    // ------------------------------------------------------------------------
                    $field                  = $modules->get("InputfieldText");
                    $field->name            = "resetSelector";
                    $field->label           = __("Custom page selector");
                    $field->icon            = "database";
                    $field->columnWidth     = '70';
                    $field->description     = __("Enter here the ProcessWire page selector on which pages and/or templates a counter should be reset.");
                    $field->notes           = __("For example: \"template=news\" or \"id=123|456|789\". If you have many pages, use limits in your selectors before triggering a timeout.");
                    $field->value           = "";
                    $fieldset->add($field);

                    // ------------------------------------------------------------------------
                    // Dry run
                    // ------------------------------------------------------------------------
                    $field                  = $modules->get("InputfieldCheckbox");
                    $field->name            = "dryRun";
                    $field->label           = __("Dry run");
                    $field->checkboxLabel   = __("Perform a dry run");
                    $field->icon            = "exclamation-triangle";
                    $field->columnWidth     = '30';
                    $field->checked         = 'checked';
                    $field->description     = __("Activate the dry run option for a test.");
                    $field->notes           = __("If this option is activated, no data records are changed.");
                    $field->value           = 1;
                    $fieldset->add($field);

                    // ------------------------------------------------------------------------
                    // Reset results
                    // ------------------------------------------------------------------------
                    if($resetResult) {
                        $field                  = $modules->get("InputfieldMarkup");
                        $field->name            = "resetResult";
                        $field->icon            = "info-circle";
                        $field->label           = __("Result after reset");
                        $field->value           = "<span class='resetResultInfo'>". $resetResult ."</span>";
                        $field->notes           = __("Note: The amount depends only on counters that have a value greater than 0.");
                        $fieldset->add($field);
                        $session->remove('resetResult');
                    }

                // ------------------------------------------------------------------------
                // Add fieldset to form
                // ------------------------------------------------------------------------
                $form->add($fieldset);

        // ------------------------------------------------------------------------
        // Build form
        // ------------------------------------------------------------------------
        return $form;
    }

    /**
     * ------------------------------------------------------------------------
     * Init module
     * ------------------------------------------------------------------------
     * @return mixed
     */
    public function init() {

        // ------------------------------------------------------------------------
        // Only attach hooks if templates are configured
        // ------------------------------------------------------------------------
        if(wireCount($this->forTemplates) > 0 OR wireCount($this->forAPITemplates) > 0) {
            
            // ------------------------------------------------------------------------
            // Show counter in page tree
            // ------------------------------------------------------------------------
            if($this->showForBackend) {
                $this->addHookAfter('ProcessPageListRender::getPageLabel', $this, 'addPageListHitCounter');
                wire('config')->styles->add($this->config->urls->PageHitCounter . 'PageHitCounter.min.css');
            }

            // ------------------------------------------------------------------------
            // Attach hook to reset counter after cloning a page
            // ------------------------------------------------------------------------
            $this->addHookAfter("Pages::cloned", $this, 'resetClonedPageCounter');

            // ------------------------------------------------------------------------
            // Attach hook for automatic tracking script
            // ------------------------------------------------------------------------
            if(wireCount($this->forTemplates) > 0) {
                $this->addHookAfter("Page::render", $this, 'insertAutomaticHitCounterTracking');
            }

            // ------------------------------------------------------------------------
            // Attach hook for AJAX post request tracking
            // ------------------------------------------------------------------------
            if(isset($_SERVER['REQUEST_URI']) AND strlen($_SERVER['REQUEST_URI']) - strlen('/phcv1') === strrpos($_SERVER['REQUEST_URI'], '/phcv1')) {
                $this->addHookBefore("ProcessPageView::pageNotFound", $this, "trackPageView", array("priority" => 5));
            }
        }
    }

    /**
     * ------------------------------------------------------------------------
     * Reset page counter value to 0 off cloned page
     * ------------------------------------------------------------------------
     * @param  HookEvent $event
     */
    protected function resetClonedPageCounter(HookEvent $event) {

        // ------------------------------------------------------------------------
        // Init vars
        // ------------------------------------------------------------------------
        // Important: The event arguments include both the copied page and the newly 
        // created page. Don't use $event->arguments('page') as this returns the page 
        // that is being cloned rather than the cloned copy. Instead use 
        // $event->arguments(1) which correctly refers to the new copy.
        // ------------------------------------------------------------------------
        $clonedPage = $event->arguments(1);

        // ------------------------------------------------------------------------
        // Reset counter for cloned page
        // ------------------------------------------------------------------------
        if($clonedPage->id) {
            $this->resetPageViews("id={$clonedPage->id}", 0);
        }
    }

    /**
     * ------------------------------------------------------------------------
     * Add phit field to selected templates
     * ------------------------------------------------------------------------
     * @param array $toTemplates
     */
    private function addCounterField($toTemplates) {

        // ------------------------------------------------------------------------
        // Init vars
        // ------------------------------------------------------------------------
        $templates = wire('templates');

        // ------------------------------------------------------------------------
        // Add field to templates
        // ------------------------------------------------------------------------
        if(wireCount($toTemplates) > 0) {
            foreach($toTemplates as $toTemplate) {
                $t = $templates->get("{$toTemplate}");
                if($t->id) {
                    if(!$t->hasField(self::PHCFIELDNAME)) {
                        $t->fields->add(self::PHCFIELDNAME);
                        $t->fields->save();
                    }
                }
            }
        }

        // ------------------------------------------------------------------------
        // Remove phits from non selected templates
        // ------------------------------------------------------------------------
        foreach($templates as $template) {
            if(!in_array((string) $template->name, $toTemplates)) {
                if($template->hasField(self::PHCFIELDNAME)) {
                    $template->fields->remove(self::PHCFIELDNAME);
                    $template->fields->save();
                }
            }
        }
    }

    /**
     * ------------------------------------------------------------------------
     * Reset page view by given selector
     * ------------------------------------------------------------------------
     * @param  string $pageSelector
     * @param  integer $dryRun
     */
    public function resetPageViews($pageSelector, $dryRun) {

        // ------------------------------------------------------------------------
        // Init vars
        // ------------------------------------------------------------------------
        $sanitizer      = wire('sanitizer');
        $pages          = wire('pages');
        $database       = wire('database');
        $session        = wire('session');
        $returnResult   = "";

        // ------------------------------------------------------------------------
        // Get page ids from selector
        // ------------------------------------------------------------------------
        $pageSelector   = wire('sanitizer')->text($pageSelector);
        $pageResults    = wire('pages')->findMany("{$pageSelector}, include=all", array('getIds' => true));
        
        // ------------------------------------------------------------------------
        // If pages found
        // ------------------------------------------------------------------------
        if($pageResults) {

            // ------------------------------------------------------------------------
            // Select entries from counter table
            // ------------------------------------------------------------------------
            $ids    = implode(',', explode('|', $pageResults));
            $sql    = "SELECT `pages_id` FROM `". self::PHCDBTABLE ."` WHERE `pages_id` IN ({$ids}) AND `data` > 0;";
            $query  = $database->prepare($sql);
            $query->execute();
            
            // ------------------------------------------------------------------------
            // If records were found 
            // ------------------------------------------------------------------------
            if($query->rowCount() > 0) {
                $resultAmount = $query->rowCount();

                // ------------------------------------------------------------------------
                // If it's just a dry run, return only the amount
                // ------------------------------------------------------------------------
                if($dryRun === 1) {
                    $returnResult = $resultAmount . " " . __("counters would be affected by the change.");

                // ------------------------------------------------------------------------
                // Else reset the affected records to 0
                // ------------------------------------------------------------------------
                } else {

                    $sql    = "UPDATE `". self::PHCDBTABLE ."` SET `data` = 0, `last_hit` = NULL WHERE `pages_id` IN ({$ids}) AND `data` > 0;";
                    $query  = $database->prepare($sql);
                    $query->execute();
                    $returnResult = $resultAmount . " " . __("counters have been reset.");
                }

            // ------------------------------------------------------------------------
            // Else return info
            // ------------------------------------------------------------------------
            } else {
                $returnResult = __("No counters would be affected by the change.");
            }

        // ------------------------------------------------------------------------
        // Else return error
        // ------------------------------------------------------------------------
        } else {
            $returnResult = __("No counters found. Check your selector.");
        }

        // ------------------------------------------------------------------------
        // Set result in session var
        // ------------------------------------------------------------------------
        $session->set('resetResult', $returnResult);
    }

    /**
     * ------------------------------------------------------------------------
     * Track page view from frontend AJAX call
     * ------------------------------------------------------------------------
     * @param  HookEvent $event
     */
    protected function trackPageView(HookEvent $event) {

        // ------------------------------------------------------------------------
        // If no AJAX request, exit
        // ------------------------------------------------------------------------
        if(empty($_SERVER['HTTP_X_REQUESTED_WITH']) OR strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) !== 'xmlhttprequest') exit();

        // ------------------------------------------------------------------------
        // Validate IP address
        // ------------------------------------------------------------------------
        if(!$this->checkIP($this->session->getIP())) exit();

        // ------------------------------------------------------------------------
        // Validate UserAgent / Bot filter
        // ------------------------------------------------------------------------
        if(!$this->checkBot()) exit();

        // ------------------------------------------------------------------------
        // Exclude certain roles
        // ------------------------------------------------------------------------
        if($this->user->isLoggedin()) {
            foreach($this->user->roles as $role) {
                if(in_array((string) $role->name, $this->forRoles)) exit();
            }
        }

        // ------------------------------------------------------------------------
        // Init page ID or exit if no ID given
        // ------------------------------------------------------------------------
        $pageID             = (int) $this->sanitizer->int($this->input->post->pid);
        if(!is_int($pageID)) exit();
        $pageID             = $this->sanitizer->selectorValue($pageID);

        // ------------------------------------------------------------------------
        // Load target page and check for right template
        // ------------------------------------------------------------------------
        if(wireCount($this->forTemplates) <= 0 AND wireCount($this->forAPITemplates) <= 0) exit();
        $templateSelector   = implode('|', array_unique(array_merge($this->forTemplates, $this->forAPITemplates)));
        $trackedPage        = $this->pages->find("id={$pageID}, template={$templateSelector}, limit=1, include=hidden", array('findIDs' => 1));

        // ------------------------------------------------------------------------
        // If page found
        // ------------------------------------------------------------------------
        if(wireCount($trackedPage) > 0) {

            // ------------------------------------------------------------------------
            // Check for session lifetime
            // ------------------------------------------------------------------------
            if(!$this->checkSession($pageID)) exit();

            // ------------------------------------------------------------------------
            // Build SQL query
            // ------------------------------------------------------------------------
            $sql    = "INSERT INTO `". self::PHCDBTABLE ."` (`pages_id`, `data`, `last_hit`) VALUES (:page_id, 1, CURRENT_TIMESTAMP) ON DUPLICATE KEY UPDATE `data` = data + 1, `last_hit` = CURRENT_TIMESTAMP;";

            // ------------------------------------------------------------------------
            // Execute SQL
            // ------------------------------------------------------------------------
            try {
                $query = $this->database->prepare($sql);
                $query->bindValue(':page_id', $pageID);
                $query->execute();

                // ------------------------------------------------------------------------
                // Call hookable method after view was tracked
                // ------------------------------------------------------------------------
                // @by Bernhard Baumrock
                $this->pageViewTracked($pageID);

            } catch(Exception $e) {
                $this->log->error($e->getMessage());
                exit();
            }
        }

        // ------------------------------------------------------------------------
        // Exit before 404
        // ------------------------------------------------------------------------
        exit();
    }

    /**
     * ------------------------------------------------------------------------
     * Hookable method to execute code after pageview was tracked
     * ------------------------------------------------------------------------
     * @param  integer $pageID Tracked page ID
     * @return void
     * @by Bernhard Baumrock
     */
    public function ___pageViewTracked($pageID) {}

    /**
     * ------------------------------------------------------------------------
     * Check UserAgent for bot, spider and crawler signature
     * ------------------------------------------------------------------------
     * @see https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker/blob/master/_generator_lists/bad-user-agents.list
     * @return boolean
     */
    private function checkBot() {
        
        // ------------------------------------------------------------------------
        // If function is disabled, return
        // ------------------------------------------------------------------------
        if(!$this->botFilter) return true;

        // ------------------------------------------------------------------------
        // Check User Agent for bot signature
        // ------------------------------------------------------------------------
        if(isset($_SERVER['HTTP_USER_AGENT'])) { 
            $useragent  = $this->sanitizer->text($_SERVER['HTTP_USER_AGENT']);
            $botlist    = preg_replace("/\r|\n/", "", file_get_contents(__DIR__ . "/botlist.txt"));
            if(preg_match("/({$botlist})/i", $useragent)) return false;
        }

        return true;
    }

    /**
     * ------------------------------------------------------------------------
     * Validates and filter IP address
     * ------------------------------------------------------------------------
     * @param  string $ip
     * @return boolean
     */
    private function checkIP($ip) {
        
        // ------------------------------------------------------------------------
        // Basic IP check
        // ------------------------------------------------------------------------
        if($this->ipValidation) {
            if(!$ip OR !filter_var($ip, FILTER_VALIDATE_IP)) return false;
        }

        // ------------------------------------------------------------------------
        // Check IP for custom filter list
        // ------------------------------------------------------------------------
        if(!empty($this->ipFilter)) {
            $customIPs = array_unique(explode("\n", $this->ipFilter), SORT_REGULAR);
            $customIPs = (is_array($customIPs)) ? $customIPs : array($this->ipFilter);
            $customIPs = array_map('trim', $customIPs);

            if(in_array($ip, $customIPs)) return false;
        }

        return true;
    }

    /**
     * ------------------------------------------------------------------------
     * Check session/cookie and lifetime for page view
     * ------------------------------------------------------------------------
     * @param  int    $pageID
     * @return boolean
     */
    private function checkSession($pageID) {

        // ------------------------------------------------------------------------
        // Do not create cookies/session if lifetime is set to 0 or the 404 page 
        // is triggered
        // ------------------------------------------------------------------------
        if((int) $this->sessionLifetime === 0 OR (int) $pageID === (int) $this->config->http404PageID) return true;

        // ------------------------------------------------------------------------
        // Use cookieless tracking method
        // ------------------------------------------------------------------------
        if($this->cookielessTracking === 1) {

            // ------------------------------------------------------------------------
            // Get session
            // ------------------------------------------------------------------------
            $userSession    = $this->session->get(self::PHCSESSION . $pageID);

            // ------------------------------------------------------------------------
            // Init base path of request and remove language-specific segments 
            // from the request. This way, page views that are only called in another 
            // language are not counted as a new hit
            // ------------------------------------------------------------------------
            $pagePath       = $this->sanitizer->entities($this->pages->get($pageID)->path);
            $basePath       = $this->sanitizer->entities($this->input->url());
            $basePath       = substr($basePath, 0, -strlen('phcv1'));
            $basePath       = strstr($basePath, $pagePath);
            $basePathIndex  = md5($basePath);

            // ------------------------------------------------------------------------
            // If no session exist, create it and return true for tracking
            // ------------------------------------------------------------------------
            if($userSession === NULL) {
                $userSession                            = [];
                $userSession['urls'][$basePathIndex]    = time() + $this->sessionLifetime;
                $userSession['lifetime']                = time() + $this->sessionLifetime;
                $this->session->set(self::PHCSESSION . $pageID, $userSession);

                return true;

            // ------------------------------------------------------------------------
            // If session is present, but "ignore URL segements" is deactivated, 
            // check for current request
            // ------------------------------------------------------------------------
            } elseif($userSession !== NULL AND $this->ignoreURLSegments !== 1) {

                // ------------------------------------------------------------------------
                // Path is not yet in the array or the lifetime since the last hit has 
                // already expired, then count a hit
                // ------------------------------------------------------------------------
                if(!isset($userSession['urls'][$basePathIndex]) OR 
                   (isset($userSession['urls'][$basePathIndex]) AND $userSession['urls'][$basePathIndex] < time())) {
                    
                    // ------------------------------------------------------------------------
                    // Update session data and save it
                    // ------------------------------------------------------------------------
                    $userSession['urls'][$basePathIndex] = time() + $this->sessionLifetime;
                    $this->session->set(self::PHCSESSION . $pageID, $userSession);
                    
                    return true;

                // ------------------------------------------------------------------------
                // Else return false for do not track the hit
                // ------------------------------------------------------------------------
                } else {
                    return false;
                }

            // ------------------------------------------------------------------------
            // The "Ignore URL segments" function is enabled, just check the session 
            // lifetime. If it has expired, count another hit
            // ------------------------------------------------------------------------
            } elseif($userSession !== NULL AND $this->ignoreURLSegments === 1 AND $userSession['lifetime'] < time()) {

                // ------------------------------------------------------------------------
                // Update session data and save it
                // ------------------------------------------------------------------------
                $userSession['lifetime'] = time() + $this->sessionLifetime;
                $this->session->set(self::PHCSESSION . $pageID, $userSession);

                return true;

            // ------------------------------------------------------------------------
            // Else return false for do not track the hit
            // ------------------------------------------------------------------------
            } else {
                return false;
            }

        // ------------------------------------------------------------------------
        // Use cookie based tracking method
        // ------------------------------------------------------------------------
        } else {

            // ------------------------------------------------------------------------
            // Get cookie
            // ------------------------------------------------------------------------
            $cookie = $this->input->cookie(self::PHCCOOKIE . $pageID);

            // ------------------------------------------------------------------------
            // If no cookie exist, create it and return true for tracking
            // ------------------------------------------------------------------------
            if($cookie === NULL) {

                // ------------------------------------------------------------------------
                // Set base path
                // ------------------------------------------------------------------------
                $basePath = ($this->ignoreURLSegments === 1) ? '/' : '';

                // ------------------------------------------------------------------------
                // Set cookie
                // ------------------------------------------------------------------------
                setcookie(self::PHCCOOKIE . $pageID, 1, time() + $this->sessionLifetime, $basePath);
                return true;

            // ------------------------------------------------------------------------
            // Else return false for do not track the hit
            // ------------------------------------------------------------------------
            } else {
                return false;
            }
        }
    }

    /**
     * ------------------------------------------------------------------------
     * Build tracking code injection if auto load option is enabled for 
     * given template
     * ------------------------------------------------------------------------
     * @param  HookEvent $event
     * @return mixed
     */
    protected function insertAutomaticHitCounterTracking(HookEvent $event) {
        if(in_array((string) $event->object->template, $this->forTemplates) AND (string) $event->object->template !== 'admin') {
            $content        = $event->return;
            $content        = str_replace('<body', '<body data-phc="'. (int) $event->object->id .'"', $content);
            $content        = str_replace('</body>', $this->buildTrackingCode() . '</body>', $content);
            $event->return  = $content;
        }
    }

    /**
     * ------------------------------------------------------------------------
     * Build tracking code for frontend
     * ------------------------------------------------------------------------
     * @return string
     */
    private function buildTrackingCode() {
        $trackingFile = ($this->config->debug) ? "PageHitCounter.js" : "PageHitCounter.min.js";
        return (string) "<script {$this->customAttributes} src='{$this->config->urls->PageHitCounter}{$trackingFile}'></script>";
    }

    /**
     * ------------------------------------------------------------------------
     * Build hit counter for admin page tree on given and allowed templates
     * ------------------------------------------------------------------------
     * @param HookEvent $event
     */
    protected function addPageListHitCounter(HookEvent $event) {

        // ------------------------------------------------------------------------
        // Get current requested page
        // ------------------------------------------------------------------------
        $page = $event->arguments('page');
        if(isset($event->arguments[1]) && $event->arguments[1]['noTags']) return;

        // ------------------------------------------------------------------------
        // Merge templates
        // ------------------------------------------------------------------------
        $allowedTemplates = array_unique(array_merge($this->forTemplates, $this->forAPITemplates));

        // ------------------------------------------------------------------------
        // If current page template ist not allowed, return
        // ------------------------------------------------------------------------
        if(!in_array($page->template->name, $allowedTemplates) OR in_array($page->template->name, $this->excludeTemplates)) return;

        // ------------------------------------------------------------------------
        // Else get hits and return event
        // ------------------------------------------------------------------------
        $event->return = $this->buildPageListHitCounter((int) $page->get(self::PHCFIELDNAME), $page->lastPageHit) . $event->return;
    }

    /**
     * ------------------------------------------------------------------------
     * Formats the counter for the admin page tree.
     * ------------------------------------------------------------------------
     * @param  int $number  Number of views
     * @param  int $lastHit Timestamp of last page view
     * @return string       Formated counter for admin page tree list
     */
    public function buildPageListHitCounter($number, $lastHit = NULL) {
        $_lastHit = ($lastHit !== NULL OR !empty($lastHit)) ? ' ' . $this->_('Last viewed on:') . ' ' . $this->datetime->date('relative', $lastHit) . ' (' . $this->datetime->date('', $lastHit) . ')' : '';
        $_counter = number_format($number, 0, ',', $this->thousandSeparator);
        return "<div class='pageListHitCounterWrapper' title='". $_counter . " " . $this->_('people have viewed this page.') . $_lastHit . "'>
                    <span class='pageListHitCounter'>
                        <i class='icon fa fa-fw fa-eye'></i>". $_counter ."
                    </span>
                </div>";
    }

    /**
     * ------------------------------------------------------------------------
     * Upgrade module and schema
     * ------------------------------------------------------------------------
     * @param  int $fromVersion 
     * @param  int $toVersion   
     */
    public function ___upgrade($fromVersion, $toVersion) {

        // ------------------------------------------------------------------------
        // Rebuild new database schema, install fieldtype and import old data
        // ------------------------------------------------------------------------
        if($fromVersion <= 110 AND $toVersion <= 121) {

            // ------------------------------------------------------------------------
            // Init vars
            // ------------------------------------------------------------------------
            $fields     = wire('fields');
            $modules    = wire('modules');

            if(!$modules->isInstalled("FieldtypePageHitCounter")) {
                $modules->install("FieldtypePageHitCounter");
            }

            // ------------------------------------------------------------------------
            // Create and install hit counter field type
            // ------------------------------------------------------------------------
            if(!$fields->get(self::PHCFIELDNAME)) {
                $field              = new Field;
                $field->type        = $this->modules->get("FieldtypePageHitCounter");
                $field->name        = self::PHCFIELDNAME;
                $field->label       = __("Page hits");
                $field->flags       = 0;
                $field->collapsed   = 4;
                $field->tags        = "-pagehits";
                $field->icon        = 'eye';
                $field->save();
            }

            // ------------------------------------------------------------------------
            // Add phits to templates
            // ------------------------------------------------------------------------
            if(wireCount($this->forTemplates) > 0 OR wireCount($this->forAPITemplates) > 0) {
                $this->addCounterField(array_unique(array_merge($this->forTemplates, $this->forAPITemplates)));
            }

            // ------------------------------------------------------------------------
            // Write old counter stats to new phits field
            // ------------------------------------------------------------------------
            $sql    = "SELECT * FROM `modules_hit_counter` WHERE `page_id` != 0;";
            $query  = $this->database->prepare($sql);
            $query->execute();

            if($query->rowCount() > 0) {
                $result = $query;
                foreach($result as $entry) {
                    $sql    = "INSERT INTO `". self::PHCDBTABLE ."` (`pages_id`, `data`) VALUES (:page_id, :counter) ON DUPLICATE KEY UPDATE `data` = :counter;";
                    $query  = $this->database->prepare($sql);
                    $query->bindValue(':page_id', $entry['page_id']);
                    $query->bindValue(':counter', $entry['page_counter']);
                    $query->execute();
                }
            }
             
            // ------------------------------------------------------------------------
            // Delete old DB
            // ------------------------------------------------------------------------
            $sql    = "DROP TABLE `modules_hit_counter`;";
            $query  = $this->database->prepare($sql);
            $query->execute();
        }

        // ------------------------------------------------------------------------
        // Change database schema, add 'last_hit' column to field table
        // ------------------------------------------------------------------------
        if($fromVersion < 200 AND $toVersion == 200) {
            $sql = "ALTER TABLE `". self::PHCDBTABLE ."` ADD `last_hit` DATETIME NULL DEFAULT NULL AFTER `data`;";
            $query  = $this->database->prepare($sql);
            $query->execute();
        }
    }

    /**
     * ------------------------------------------------------------------------
     * Install module and database table
     * ------------------------------------------------------------------------
     */
    public function ___install() {

        // ------------------------------------------------------------------------
        // Init vars
        // ------------------------------------------------------------------------
        $fields     = wire('fields');

        // ------------------------------------------------------------------------
        // Create and install hit counter field type
        // ------------------------------------------------------------------------
        if(!$fields->get(self::PHCFIELDNAME)) {
            $field              = new Field;
            $field->type        = $this->modules->get("FieldtypePageHitCounter");
            $field->name        = self::PHCFIELDNAME;
            $field->label       = __("Page hits");
            $field->flags       = 0;
            $field->collapsed   = 4;
            $field->tags        = "-pagehits";
            $field->icon        = 'eye';
            $field->save();
        } else {
            throw new WireException("A field with the name \"phits\" already exists. This means that this module cannot be installed.");
        }
    }

    /**
     * ------------------------------------------------------------------------
     * Uninstall module and database table
     * ------------------------------------------------------------------------
     */
    public function ___uninstall() {

        // ------------------------------------------------------------------------
        // Init vars
        // ------------------------------------------------------------------------
        $fields     = wire('fields');
        $templates  = wire('templates');
        $modules    = wire('modules');

        // ------------------------------------------------------------------------
        // Remove phits from templates
        // ------------------------------------------------------------------------
        foreach($templates as $template) {
            if(!$template->hasField(self::PHCFIELDNAME)) continue;
            $template->fields->remove(self::PHCFIELDNAME);
            $template->fields->save();
        }

        // ------------------------------------------------------------------------
        // Delete field
        // ------------------------------------------------------------------------
        $fields->delete($fields->get(self::PHCFIELDNAME));

        // ------------------------------------------------------------------------
        // Uninstall fieldtype counter
        // ------------------------------------------------------------------------
        $modules->uninstall('FieldtypePageHitCounter');        
    }
}

?>
